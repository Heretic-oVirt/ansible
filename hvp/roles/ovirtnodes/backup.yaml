---
# Ansible playbook to setup a complete Bareos infrastructure (Director on Engine, nodes as storage daemons)
# TODO: install, configure and enable/start Bareos file daemons on every guest vm
- name: Generate SSH key if not present
  hosts: localhost
  tasks:
    - include_tasks: ../common/tasks/createkeys.yaml
    - name: Get common vars
      include_vars:
        file: "{{ item }}"
      with_items:
        - "../common/vars/hvp.yaml"
        - "../common/vars/ad.yaml"
    - name: Create random passwords for storage daemons on nodes
      set_vars:
        bareos_sd_dir_password: "{{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits encrypt=no') }}"
        bareos_sd_mon_password: "{{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits encrypt=no') }}"
- name: Install and configure Bareos on oVirt nodes
  hosts: ovirtnodes
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Get common vars
      include_vars:
        file: "{{ item }}"
      with_items:
        - "../common/vars/hvp.yaml"
        - "../common/vars/ad.yaml"
    - name: List Bareos-related packages on nodes
      set_vars:
        hvp_bareos_node_packages:
          - bareos-tools
          - bareos-client
          - bareos-filedaemon-glusterfs-plugin
          - bareos-storage
          - bareos-storage-glusterfs
    - name: Install Bareos-related packages on nodes
      yum:
        name: "{{ hvp_bareos_node_packages }}"
        state: latest
    - name: Cleanup Bareos rpm leftovers on nodes
      command: "{{ item }}"
      register: cleanupnodesbareosinstleftovers_result
      with_items:
        - "find /etc/bareos -type f -name '*.rpmnew' -exec rename .rpmnew '' '{}' ';'"
        - "find /etc/bareos -type f -name '*.rpmsave' -exec rm -f '{}' ';'"
    - name: Create random passwords for file daemons on nodes
      set_fact:
        bareos_fd_dir_password: "{{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits encrypt=no') }}"
        bareos_fd_mon_password: "{{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits encrypt=no') }}"
    - name: Copy Gluster plugins configuration template files on oVirt nodes
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        group: bareos
        owner: bareos
        mode: 0640
        remote_src: yes
      with_items:
        - { src: "/etc/bareos/bareos-dir.d/storage/Gluster.conf.example", dest: "/etc/bareos/bareos-dir.d/storage/Gluster.conf" }
        - { src: "/etc/bareos/bareos-sd.d/device/GlusterStorage.conf.example", dest: "/etc/bareos/bareos-sd.d/device/GlusterStorage.conf" }
    - name: Set parameters in configuration files on oVirt nodes
      lineninfile:
        state: present
        path: "{{ item.path }}"
        backrefs: yes
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      register: setnodesbareosparameters_result
      with_items:
        - { path: "/etc/bareos/bareos-fd.d/client/myself.conf", regexp: "^([[:space:]]*)Name", line: "\1Name = {{ ansible_hostname }}-fd" }
        - { path: "/etc/bareos/bareos-fd.d/director/bareos-dir.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_fd_dir_password'] }}\"" }
        - { path: "/etc/bareos/bareos-fd.d/director/bareos-mon.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_fd_mon_password'] }}\"" }
        - { path: "/etc/bareos/tray-monitor.d/client/FileDaemon-local.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_fd_mon_password'] }}\"" }
        - { path: "/etc/bareos/bareos-sd.d/storage/bareos-sd.conf", regexp: "^([[:space:]]*)Name", line: "\1Name = {{ ansible_hostname }}-sd\n\1Heartbeat Interval = 1 min" }
        - { path: "/etc/bareos/bareos-sd.d/director/bareos-dir.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ bareos_sd_dir_password }}\"" }
        - { path: "/etc/bareos/bareos-sd.d/director/bareos-mon.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ bareos_sd_mon_password }}\"" }
        - { path: "/etc/bareos/tray-monitor.d/storage/StorageDaemon-local.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ bareos_sd_mon_password }}\"" }
        - { path: "/etc/bareos/bareos-sd.d/device/GlusterStorage.conf", regexp: "^([[:space:]]*)Device Options", line: "\1Device Options = \"uri=gluster://localhost/{{ hvp_backup_volume_name }}/bareos\"" }
        - { path: "/etc/bareos/bareos-sd.d/device/GlusterStorage.conf", regexp: "^([[:space:]]*)Name", line: "\1Name = GlusterStorage" }
        - { path: "/etc/bareos/bareos-dir.d/storage/Gluster.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ bareos_sd_dir_password }}\"" }
        - { path: "/etc/bareos/bareos-dir.d/storage/Gluster.conf", regexp: "^([[:space:]]*)Name", line: "\1Name = \"Gluster\"" }
        - { path: "/etc/bareos/bareos-dir.d/storage/Gluster.conf", regexp: "^([[:space:]]*)Device", line: "\1Device = \"GlusterStorage\"" }
- name: Prepare Gluster-volume based dirs for Backup
  hosts: ovirt_master
  remote_user: root
  tasks:
    - name: Mount the Gluster volume intended for Backup
      command: "mount -t glusterfs localhost:/{{ hvp_backup_volume_name }} /mnt"
      register: backupmount_result
      warn: false
    - name: Create the toplevel folders intended for Backup
      file:
        path: "{{ item.path }}"
        state: directory
        owner: "{{ item.owner }}"
        group: "{{ item.group }}"
        mode: "{{ item.mode }}"
      with_items:
        - { path: '/mnt/bareos', owner: 'bareos', group: 'bareos', mode: '0770' }
        - { path: '/mnt/export', owner: 'vdsm', group: 'kvm', mode: '0770' }
      when: backupmount_result.rc == 0
    - name: Unmount the Gluster volume intended for Backup
      command: "umount -l /mnt"
      register: backupumount_result
      warn: false
- name: Install, configure and start Bareos on Engine
  hosts: ovirtengine
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Get common vars
      include_vars:
        file: "{{ item }}"
      with_items:
        - "../common/vars/hvp.yaml"
        - "../common/vars/ad.yaml"
    - name: List Bareos-related packages on Engine
      set_vars:
        hvp_bareos_engine_packages:
          - bareos-tools
          - bareos-client
          - bareos-director
          - bareos-database-postgresql
          - bareos-database-tools
          - bareos-webui
    - name: Install Bareos-related packages on Engine
      yum:
        name: "{{ hvp_bareos_engine_packages }}"
        state: latest
    - name: Cleanup Bareos rpm leftovers on Engine
      command: "{{ item }}"
      register: cleanupenginebareosinstleftovers_result
      with_items:
        - "find /etc/bareos -type f -name '*.rpmnew' -exec rename .rpmnew '' '{}' ';'"
        - "find /etc/bareos -type f -name '*.rpmsave' -exec rm -f '{}' ';'"
    - name: Allow network connections from Bareos WebUI through SELinux on Engine
      seboolean:
        name: httpd_can_network_connect
        state: yes
        persistent: yes
    - name: Restart Apache to apply Bareos WebUI configuration fragment on Engine
      systemd:
        name: httpd
        enabled: true
        state: restarted
        no_block: no
    - name: Create random passwords for file and director daemons on Engine
      set_fact:
        bareos_fd_dir_password: "{{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits encrypt=no') }}"
        bareos_fd_mon_password: "{{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits encrypt=no') }}"
        bareos_dir_dir_password: "{{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits encrypt=no') }}"
        bareos_dir_mon_password: "{{ lookup('password', '/dev/null length=45 chars=ascii_letters,digits encrypt=no') }}"
        bareos_dir_db_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits encrypt=no') }}"
        bareos_webui_admin_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits encrypt=no') }}"
    - name: Set parameters in configuration files on Engine
      # TODO: find if/where to set the director monitoring password
      # TODO: add jobdefs for restore jobs
      # TODO: configure jobs (add one backup job for each node - add one backup job for each Gluster share volume - add restore jobs)
      # TODO: customize recipients in messages (use monitoring address)
      # TODO: customize pools (change retention times)
      # TODO: customize profiles (add other roles besides operator?)
      # TODO: customize schedules (add MonthlyCycle?)
      # TODO: customize storages (add external USB/eSATA media - manage detection and encryption)
      lineninfile:
        state: present
        path: "{{ item.path }}"
        backrefs: yes
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      register: setenginebareosparameters_result
      with_items:
        - { path: "/etc/bareos/bareos-fd.d/client/myself.conf", regexp: "^([[:space:]]*)Name", line: "\1Name = bareos-fd" }
        - { path: "/etc/bareos/bareos-fd.d/director/bareos-dir.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_fd_dir_password'] }}\"" }
        - { path: "/etc/bareos/bareos-fd.d/director/bareos-mon.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_fd_mon_password'] }}\"" }
        - { path: "/etc/bareos/tray-monitor.d/client/FileDaemon-local.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_fd_mon_password'] }}\"" }
        - { path: "/etc/bareos/bareos-dir.d/client/bareos-fd.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_fd_dir_password'] }}\"\n\1Heartbeat Interval = 1 min" }
        - { path: "/etc/bareos/bareos-dir.d/job/backup-bareos-fd.conf", regexp: "^([[:space:]]*)JobDefs", line: "\1JobDefs = \"LinuxDefaultJob\"" }
        - { path: "/etc/bareos/bareos-dir.d/job/BackupCatalog.conf", regexp: "^([[:space:]]*)(Schedule.*)$", line: "\1# \2" }
        - { path: "/etc/bareos/bareos-dir.d/director/bareos-dir.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_dir_dir_password'] }}\"" }
        - { path: "/etc/bareos/bareos-dir.d/director/bareos-dir.conf", regexp: "^([[:space:]]*)#*[[:space:]]*Heartbeat Interval[[:space:]]*=", line: "\1Heartbeat Interval = 1 min" }
        - { path: "/etc/bareos/bareos-dir.d/console/bareos-mon.conf", regexp: "^([[:space:]]*)Password", line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_dir_mon_password'] }}\"" }
        - { path: "/etc/bareos/bareos-dir.d/catalog/MyCatalog.conf", regexp: "^([[:space:]]*)dbdriver", line: "\1dbdriver = \"postgresql\"" }
        - { path: "/etc/bareos/bareos-dir.d/catalog/MyCatalog.conf", regexp: "^([[:space:]]*)dbpassword", line: "\1dbpassword = \"{{ hostvars[inventory_hostname]['bareos_dir_db_password'] }}\"" }
    - name: Create a client configuration file for each oVirt node on Engine
      template:
        src: templates/node-fd.j2
        dest: "/etc/bareos/bareos-dir.d/client/{{ hostvars[item]['ansible_hostname'] }}-fd.conf"
        owner: bareos
        group: bareos
        mode: 0640
      with_items: "{{ groups['ovirtnodes'] }}"
    - name: Create a job configuration file for each oVirt node on Engine
      template:
        src: templates/backup-node-fd.j2
        dest: "/etc/bareos/bareos-dir.d/job/backup-{{ hostvars[item]['ansible_hostname'] }}-fd.conf"
        owner: bareos
        group: bareos
        mode: 0640
      with_items: "{{ groups['ovirtnodes'] }}"
    - name: Create a GlusterFS storage configuration file on Engine
      template:
        src: templates/Gluster.j2
        dest: "/etc/bareos/bareos-dir.d/storage/Gluster.conf"
        owner: bareos
        group: bareos
        mode: 0640
    - name: Disable default storage configuration file on Engine
      lineinfile:
        state: present
        path: "/etc/bareos/bareos-dir.d/storage/File.conf"
        backrefs: yes
        regexp: "^([^#]+.*)$"
        line: "#\1"
    - name: Copy custom Bareos configuration files on Engine
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        group: bareos
        owner: bareos
        mode: 0640
      with_items:
        - { src: "files/NoneClient.conf", dest: "/etc/bareos/bareos-dir.d/client/None.conf" }
        - { src: "files/NoneSet.conf", dest: "/etc/bareos/bareos-dir.d/fileset/None.conf" }
        - { src: "files/LinuxDefaultJob.conf", dest: "/etc/bareos/bareos-dir.d/jobdefs/LinuxDefaultJob.conf" }
        - { src: "files/WindowsDefaultJob.conf", dest: "/etc/bareos/bareos-dir.d/jobdefs/WindowsDefaultJob.conf" }
    - name: Create custom fileset configuration files on Engine
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: bareos
        group: bareos
        mode: 0640
      with_items:
        - { src: "templates/LinuxMinimalSet.j2", dest: "/etc/bareos/bareos-dir.d/fileset/LinuxMinimalSet.conf" }
        - { src: "templates/WindowsMinimalSet.j2", dest: "/etc/bareos/bareos-dir.d/fileset/WindowsMinimalSet.conf" }
    - name: Copy the WebUI admin configuration template file on Engine
      copy:
        src: "/etc/bareos/bareos-dir.d/console/admin.conf.example"
        dest: "/etc/bareos/bareos-dir.d/console/admin.conf"
        group: bareos
        owner: bareos
        mode: 0640
        remote_src: yes
    - name: Set password in WebUI admin configuration file on Engine
      lineinfile:
        state: present
        path: "/etc/bareos/bareos-dir.d/console/admin.conf"
        backrefs: yes
        regexp: "^([[:space:]]*)Password"
        line: "\1Password = \"{{ hostvars[inventory_hostname]['bareos_webui_admin_password'] }}\""
      register: setwebuiadminpassword_result
    - name: Setup Bareos DB using embedded PostgreSQL on Engine
      command: "{{ item }}"
      ignore_errors: yes
      register: setupbareosdb_result
      become: yes
      become_user: postgres
      with_items:
        - "/usr/lib/bareos/scripts/drop_bareos_tables"
        - "/usr/lib/bareos/scripts/drop_bareos_database"
        - "/usr/lib/bareos/scripts/create_bareos_database"
        - "/usr/lib/bareos/scripts/make_bareos_tables"
        - "/usr/lib/bareos/scripts/grant_bareos_privileges"
    - name: Enable and start Bareos-related services on Engine
      systemd:
        name: "{{ item }}"
        enabled: true
        state: restarted
        no_block: no
      with_items:
        - bareos-dir
        - bareos-fd
- name: Start Bareos on oVirt nodes
  hosts: ovirtnodes
  remote_user: root
  tasks:
    - name: Enable and start Bareos-related services on oVirt nodes
      systemd:
        name: "{{ item }}"
        enabled: true
        state: restarted
        no_block: no
      with_items:
        - bareos-sd
        - bareos-fd
...
