---
# Ansible playbook to initialize oVirt nodes and install oVirt Self Hosted Engine
# Note: oVirt Hosted Engine installation will be performed on the node selected as master above
# Note: we assume that libvirt lists the CPU models in an ordered sequence of increasing available features (apart from appending AMD models to Intel ones)
- name: Generate SSH key if not present
  hosts: localhost
  tasks:
    - include_tasks: ../common/tasks/createkeys.yaml
- name: Gather CPU type across all hosts
  hosts: ovirtnodes
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Start libvirt to allow easy CPU inspection
      systemd:
        name: libvirtd
        state: started
    - name: Gather CPU types
      hvp_cpu_type:
    - name: Stop libvirt after CPU inspection
      systemd:
        name: libvirtd
        state: stopped
- name: Check CPU facts cluster-wide
  hosts: localhost
  tasks:
    - name: Make sure that the CPU vendor is homogeneous
      assert: { that: "hostvars['{{ item }}']['hvp_cpu_type']['vendor'] == hostvars[groups['ovirt_master'] | first]['hvp_cpu_type']['vendor']", msg: "CPU vendor must be the same across all hosts" }
      with_items: "{{ groups['ovirt_nonmaster_nodes'] }}"
    - name: Define common CPU index
      set_fact:
        cpu_index: "{{ groups['ovirtnodes'] | map('extract', hostvars, ['hvp_cpu_type', 'index']) | list | sort | min }}"
    - name: Define common CPU model
      set_fact:
        cpu_type: "model_{{ groups['ovirtnodes'] | map('extract', hostvars, 'hvp_cpu_type') | list | json_query(\"[?index == '\" + cpu_index + \"'].model\") | first }}"
- name: Perform oVirt nodes configuration
  hosts: ovirtnodes
  remote_user: root
  tasks:
    - name: Define traditional ethernet facts
      # Note: eth interfaces enumeration taken from https://serverfault.com/a/852093
      set_fact:
        ansible_eth: "{% set ansible_eth = ansible_eth|default([]) + [hostvars[inventory_hostname]['ansible_' + item]] %}{{ ansible_eth|list }}"
      when: (hostvars[inventory_hostname]['ansible_' + item]['type'] == 'ether') or (hostvars[inventory_hostname]['ansible_' + item]['type'] == 'bonding')
      with_items:
        - "{{ hostvars[inventory_hostname]['ansible_interfaces'] }}"
    - name: Fix VDSM runtime directory
      # TODO: sometimes VDSM reconfiguration fails because of this - remove when fixed upstream
      file:
        path: /var/run/vdsm
        state: directory
        owner: vdsm
        group: kvm
        mode: 0755
    - name: Reset VDSM configuration
      command: vdsm-tool configure --force
      register: vdsm_result
    - name: Fix for KVM-nested bug
      # TODO: taken from https://gist.github.com/RabidCicada/40655db1582ca5d07c9bbf2c429cdd01 - remove when properly fixed upstream
      copy:
        src: ../common/files/51_nested_in_vmware
        dest: /usr/libexec/vdsm/hooks/before_vm_start/51_nested_in_vmware
        owner: root
        group: root
        mode: 0755
        backup: no
      when: hostvars[inventory_hostname]['ansible_virtualization_role'] == 'guest'
- name: Perform oVirt Hosted Engine setup
  hosts: ovirt_master
  remote_user: root
  tasks:
    - name: Get common vars
      include_vars:
        file: ../common/vars/hvp.yaml
    - name: Generate random MAC address for Engine appliance
      # TODO: Engine complains since its own MAC address is outside of the allocated pool - find a workaround
      shell: echo 'from ovirt_hosted_engine_setup import util as ohostedutil; print ohostedutil.randomMAC()' | python
      register: mac_result
    - name: Get Engine appliance ova filename
      shell: echo /usr/share/ovirt-engine-appliance/ovirt-engine-appliance-*.ova
      register: ova_result
    - name: Create target directory for answer file
      file:
        path: /root/etc
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Prepare Hosted Engine installation answer file
      template:
        src: templates/he-answers.j2
        dest: /root/etc/he-answers.conf
        owner: root
        group: root
        mode: 0644
    - name: Configure DHCPd reservation for Engine vm
      template:
        src: templates/dhcpd-static-leases.j2
        dest: /etc/dhcp/dhcpd-static-leases.conf
        owner: root
        group: root
        mode: 0644
      delegate_to: localhost
    - name: Apply DHCPd reconfiguration
      systemd:
        name: dhcpd
        state: restarted
      delegate_to: localhost
    - name: Ping gateway to avoid transient errors
      command: "ping -c 10 {{ hvp_switch_ip }}"
      ignore_errors: yes
    - name: Perform actual Hosted Engine setup
      # TODO: disable the new Ansible-based setup of oVirt 4.2 - restore when properly tested
      vars:
        ansible_ssh_pipelining: no
      command: "hosted-engine --deploy {{ (compatibility_version == '4.2') | ternary('--noansible', '') }} --config-append=/root/etc/he-answers.conf"
      register: setup_result
...
