---
# Ansible playbook to properly shutdown a whole HVP cluster
- name: Generate SSH key if not present
  hosts: localhost
  tasks:
    - include_tasks: ../common/tasks/createkeys.yaml
- name: Perform preliminary shutdown/maintenance operations through the Engine
  hosts: ovirtengine
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Get common vars from files
      include_vars:
        file: "../common/vars/hvp.yaml"
    - name: Obtain oVirt Engine SSO token
      no_log: true
      ovirt_auth:
        url: "{{ url }}"
        username: "{{ username }}"
        password: "{{ password }}"
        ca_file: "{{ ca_file }}"
    - name: Shutdown all guest VMs
      # Note: ignoring errors to allow for non-existent VMs
      # TODO: check for VM existence and skip if missing
      ovirt_vm:
        auth: "{{ ovirt_auth }}"
        state: stopped
        cluster: "{{ cluster_name }}"
        name: "{{ item.vm_name }}"
        wait: true
      ignore_errors: yes
      with_items: "{{ guest_vms | reverse | list }}"
    - name: Put all storage domains in maintenance except for Engine domain
      ovirt_storage_domain:
        auth: "{{ ovirt_auth }}"
        name: "{{ item }}"
        data_center: "{{ dc_name }}"
        state: maintenance
        wait: true
      with_items:
        - "{{ iso_sd_name }}"
        - "{{ vmstore_sd_name }}"
    - name: Revoke the SSO token
      no_log: true
      ovirt_auth:
        state: absent
        ovirt_auth: "{{ ovirt_auth }}"
- name: Put oVirt Hosted Engine in maintenance
  hosts: ovirt_master
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Get common vars from files
      include_vars:
        file: "../common/vars/hvp.yaml"
    - name: Activate global maintenance
      # Note: sometimes entering global maintenance requires multiple attempts
      vars:
        ansible_ssh_pipelining: no
      shell: "hosted-engine --set-maintenance --mode=global; sleep 3; hosted-engine --vm-status"
      retries: 60
      delay: 30
      register: enterglobalmaintenance_result
      until: enterglobalmaintenance_result.stdout.find('GLOBAL MAINTENANCE') != -1
- name: Perform Engine shutdown
  hosts: ovirtengine
  remote_user: root
  tasks:
    - name: Shutdown Engine VM
      include_tasks: ../common/tasks/poweroff.yaml
- name: Perform final shutdown actions on all nodes
  hosts: ovirtnodes
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Stop/disable oVirt HA services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      with_items:
        - ovirt-ha-agent.service
        - ovirt-ha-broker.service
    - name: Stop/disable CTDB and Gluster-block services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      with_items:
        - ctdb.service
        - gluster-lock.mount
        - var-run-gluster-shared_storage.mount
        - gluster-blockd.service
        - gluster-block-target.service
    - name: Unmount Engine domain
      shell: "for mountpoint in $(mount | grep rhev | awk '{print $3}'); do umount -l -f ${mountpoint} ; done"
- name: Stop GlusterFS volumes
  # Note: no need to stop/disable the GlusterFS glusterd service
  hosts: ovirt_master
  remote_user: root
  tasks:
    - name: Stop all GlusterFS volumes
      shell: "for volname in $(gluster volume list); do gluster --mode=script volume stop ${volname} force ; done"
- name: Perform final poweroff on all nodes
  hosts: ovirtnodes
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Get common vars from files
      include_vars:
        file: "../common/vars/hvp.yaml"
    - name: Shutdown node
      include_tasks: ../common/tasks/poweroff.yaml
...
