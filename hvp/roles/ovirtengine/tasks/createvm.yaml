# Ansible tasks file to create a single oVirt VM inside a loop (with all parameters passed as outer_item elements)
- name: Generate random MAC address for oVirt VM
  shell: echo 'from ovirt_hosted_engine_setup import util as ohostedutil; print ohostedutil.randomMAC()' | python
  register: vmmac_result
- name: Create PXELinux configuration for oVirt VM
  template:
    src: templates/pxelinux-vm-cfg.j2
    dest: "/var/lib/tftpboot/pxelinux.cfg/01-{{ vmmac_result.stdout | regex_replace(':', '-') }}"
    owner: root
    group: root
    mode: 0644
  delegate_to: localhost
- name: Configure DHCPd reservation for oVirt vm
  blockinfile:
    path: /etc/dhcp/dhcpd-static-leases.conf
    block: |
      host {{ outer_item.vm_name }} {
        hardware ethernet {{ vmmac_result.stdout }};
        fixed-address {{ outer_item.vm_boot_ip_address }};
      }
    insertafter: EOF
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ outer_item.vm_name }}"
    owner: root
    group: root
    mode: 0644
    backup: no
  register: dhcpvmreservation_result
  delegate_to: localhost
- name: Apply DHCPd reconfiguration for oVirt vm
  systemd:
    name: dhcpd
    state: restarted
  when: dhcpvmreservation_result.changed
  delegate_to: localhost
- name: Create oVirt VM
  ovirt_vms:
    auth: "{{ ovirt_auth }}"
    state: present
    cluster: "{{ cluster_name }}"
    storage_domain: "{{ vmstore_sd_name }}"
    name: "{{ outer_item.vm_name }}"
    comment: "{{ outer_item.vm_comment }}"
    delete_protected: "{{ outer_item.vm_delete_protected }}"
    high_availability: "{{ outer_item.vm_high_availability }}"
    memory: "{{ outer_item.vm_memory }}"
    cpu_cores: "{{ outer_item.vm_cpu_cores }}"
    cpu_sockets: "{{ iten.vm_cpu_sockets }}"
    cpu_shares: "{{ outer_item.vm_cpu_shares }}"
    type: "{{ outer_item.vm_type }}"
    operating_system: "{{ outer_item.vm_operating_system }}"
    boot_devices:
      - hd
      - network
    wait: true
- name: Create oVirt VM disk
  ovirt_disks:
    auth: "{{ ovirt_auth }}"
    state: attached
    name: "{{ outer_item.vm_name }}_disk"
    vm_name: "{{ outer_item.vm_name }}"
    interface: virtio
    format: cow
    storage_domain: "{{ vmstore_sd_name }}"
    size: "{{ outer_item.vm_disk_size }}"
    bootable: true
    wait: true
- name: Create oVirt VM nic
  ovirt_nics:
    auth: "{{ ovirt_auth }}"
    state: plugged
    name: "{{ outer_item.vm_name }}_nic"
    vm_name: "{{ outer_item.vm_name }}"
    interface: virtio
    mac_address: "{{ vmmac_result.stdout }}"
    network: "{{ outer_item.vm_network_name }}"
    wait: true
- name: Start oVirt VM
  ovirt_vms:
    auth: "{{ ovirt_auth }}"
    state: running
    cluster: "{{ cluster_name }}"
    name: "{{ outer_item.vm_name }}"
    wait: true
# TODO: wait for a specific outer_item.vm_service_port and remove/lower external loop pause
