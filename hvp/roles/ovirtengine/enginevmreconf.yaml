---
# Ansible playbook to reconfigure the pre-made oVirt Self Hosted Engine appliance according to HVP Kickstart-based installation standards
- name: Generate SSH key if not present
  hosts: localhost
  tasks:
    - include_tasks: ../common/tasks/createkeys.yaml
- name: Put oVirt Hosted Engine in maintenance
  hosts: ovirt_master
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Activate global maintenance
      vars:
        ansible_ssh_pipelining: no
      command: hosted-engine --set-maintenance --mode=global
      register: enterglobalmaintenance_result
- name: Perform oVirt Engine vm configuration
  hosts: ovirtengine
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Get common vars
      include_vars:
        file: ../common/vars/hvp.yaml
    - name: Install YUM-related packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - yum-utils
        - yum-plugin-priorities
        - deltarpm
    - name: Enable CentOS CR repo
      command: yum-config-manager --enable cr
      register: enablecentoscr_result
    - name: Customize EPEL repo inclusions
      shell: "sed -i -e 's/epel-release,/epel-release,haveged,hping3,p7zip*,arj,pwgen,pdsh*,nmon,/' /etc/yum.repos.d/ovirt-*-dependencies.repo"
      register: epelrepoedit_result
    - name: Disable EPEL repo use of DNS-based balanced mirrors
      shell: "sed -i -e 's>http://download.fedoraproject.org/pub/epel/7/>http://www.nic.funet.fi/pub/mirrors/fedora.redhat.com/pub/epel/7/>g' /etc/yum.repos.d/ovirt-*-dependencies.repo"
      register: epelrepodirect_result
    - name: Add Psychotic release package
      yum:
        name: http://packages.psychotic.ninja/6/base/i386/RPMS/psychotic-release-1.0.0-1.el6.psychotic.noarch.rpm
        state: latest
    - name: Limit Psychotic repo included files
      command: yum-config-manager --save --setopt='psychotic.include=unrar*'
      register: limitpsychotic_result
    - name: Enable Psychotic repo
      command: yum-config-manager --enable psychotic
      register: enablepsychotic_result
    - name: Add HVP release package
      yum:
        name: https://dangerous.ovirt.life/hvp-repos/el7/hvp/x86_64/hvp-release-7-2.noarch.rpm
        state: latest
    - name: Enable HVP RHGS repo
      command: yum-config-manager --enable hvp-rhgs-rebuild
      register: enablehvprhgsrebuild_result
      when: not hvp_orthodox_mode
    - name: Prefer HVP RHGS repo
      command: yum-config-manager --save --setopt='hvp-rhgs-rebuild.priority=50'
      register: preferhvprhgsrebuild_result
      when: not hvp_orthodox_mode
    - name: Enable HVP Openvswitch repo
      command: yum-config-manager --enable hvp-openvswitch-rebuild
      register: enablehvpovsrebuild_result
      when: not hvp_orthodox_mode
    - name: Prefer HVP Openvswitch repo
      command: yum-config-manager --save --setopt='hvp-openvswitch-rebuild.priority=50'
      register: preferhvpovsrebuild_result
      when: not hvp_orthodox_mode
    - name: Disable use of mirrors in all repos
      shell: "sed -i -e 's/^mirrorlist/#mirrorlist/ ; s/^metalink/#metalink/ ; s/^#baseurl/baseurl/' $(find /etc/yum.repos.d -type f -name '*.repo' -print)"
      register: disablemirrors_result
    - name: Enable use of deltarpm
      command: yum-config-manager --save --setopt='deltarpm=1'
      register: enabledeltarpm_result
    - name: Upgrade all OS packages
      yum:
        name: '*'
        state: latest
        update_cache: yes
        disablerepo: "ovirt-{{ compatibility_version }}"
    - name: Install HVP-recommended packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - abrt
        - abrt-addon-ccpp
        - abrt-addon-kerneloops
        - abrt-addon-pstoreoops
        - abrt-addon-python
        - abrt-addon-vmcore
        - abrt-cli
        - libreport-plugin-mailx
        - bash-completion
        - rsync
        - ntpdate
        - mcstrans
        - stunnel
        - symlinks
        - dos2unix
        - unix2dos
        - screen
        - telnet
        - tree
        - iptraf
        - iptstate
        - nss-tools
        - patch
        - expect
        - ncompress
        - libnl
        - redhat-lsb
        - haveged
        - hping3
        - p7zip
        - p7zip-plugins
        - unrar
        - arj
        - pwgen
        - yum-cron
        - yum-plugin-ps
        - gdisk
        - nmon
        - dstat
        - pdsh
        - pdsh-rcmd-ssh
        - NetworkManager-glib
        - nm-connection-editor
        - libselinux-python
        - libsemanage-python
        - virtio-win
    - name: Install Bareos-related packages
      yum:
        name: "{{ item }}"
        state: latest
      with_items:
        - bareos-tools
        - bareos-client
        - bareos-director
        - bareos-database-postgresql
        - bareos-database-tools
        - bareos-webui
    - name: Cleanup rpm leftovers
      command: "{{ item }}"
      register: cleanupleftovers_result
      with_items:
        - "find /etc -type f -name '*.rpmnew' -exec rename .rpmnew '' '{}' ';'"
        - "find /etc -type f -name '*.rpmsave' -exec rm -f '{}' ';'"
    - name: Configure YUM-cron
      shell: "sed -i -e 's/^update_messages\\s.*$/update_messages = no/' -e 's/^download_updates\\s.*$/download_updates = no/' -e 's/^apply_updates\\s.*$/apply_updates = no/' -e 's/^emit_via\\s.*$/emit_via = None/' /etc/yum/yum-cron*.conf"
      register: confyumcron_result
    - name: Configure kernel packages to be kept
      command: yum-config-manager --save --setopt='installonly_limit=3'
      register: keepkernelrpm_result
    - name: Configure kernel I/O scheduler policy
      # TODO: should not skip if line already contains elevator= directive
      # TODO: enact immediately if changed
      lineinfile:
        state: present
        path: /etc/default/grub
        backrefs: yes
        regexp: '^(GRUB_CMDLINE_LINUX=(?!.*elevator)\"[^\"]+)(\".*)'
        line: '\1 elevator=deadline\2'
      register: kernelio_result
    - name: Update GRUB menu
      # TODO: check path validity in case of EFI machine
      command: grub2-mkconfig -o /boot/grub2/grub.cfg
      register: updategrubmenu_result
      when: kernelio_result.changed
    - name: Disable Ctrl-Alt-Del
      systemd:
        name: ctrl-alt-del.target
        masked: yes
    - name: Set generic kernel parameters
      sysctl:
        sysctl_file: "{{ item.pfrag }}"
        state: present
        sysctl_set: yes
        reload: yes
        name: "{{ item.pname }}"
        value: "{{ item.pvalue }}"
      with_items:
        - { pname: 'kernel.printk', pvalue: '1', pfrag: '/etc/sysctl.d/console-log.conf' }
        - { pname: 'kernel.panic', pvalue: '5', pfrag: '/etc/sysctl.d/panic.conf' }
    - name: Configure boot-time time-sync sources by means of NTPdate
      copy:
        content: |
          0.centos.pool.ntp.org
        dest: /etc/ntp/step-tickers
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Create SELinux local modules directory
      file:
        path: /etc/selinux/local
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Create a SELinux local module for NTPdate
      copy:
        src: ../common/files/myntpdate.te
        dest: /etc/selinux/local/myntpdate.te
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Compile and load the SELinux local module for NTPdate
      args:
        chdir: /etc/selinux/local
      command: "{{ item }}"
      register: compilentpdatepolicy_result
      with_items:
        - 'checkmodule -M -m -o myntpdate.mod myntpdate.te'
        - 'semodule_package -o myntpdate.pp -m myntpdate.mod'
        - 'semodule -i myntpdate.pp'
    - name: Enable NTPdate on boot
      # TODO: should enable only if all in the registered values above are compilentpdatepolicy_result.results[*].rc==0
      systemd:
        name: ntpdate
        enabled: yes
    - name: Configure OpenSSH server
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        insertbefore: BOF
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      register: sshdconf_result
      with_items:
        - { regexp: '^MaxAuthTries', line: 'MaxAuthTries 3' }
        - { regexp: '^UseDNS', line: 'UseDNS no' }
        - { regexp: '^Banner', line: 'Banner /etc/issue.net' }
    - name: Restart OpenSSH to apply configuration
      # TODO: should restart only if at least one in the registered values above is sshdconf_result.results[*].changed
      systemd:
        name: sshd
        state: restarted
    - name: Configure use of at/cron facilities
      copy:
        content: |
          root
        dest: "{{ item.path }}"
        owner: root
        group: root
        mode: 0600
        backup: no
      with_items:
        - { path: '/etc/at.allow' }
        - { path: '/etc/cron.allow' }
    - name: Sanitize use of at/cron facilities
      file:
        path: "{{ item.path }}"
        state: absent
      with_items:
        - { path: '/etc/at.deny' }
        - { path: '/etc/cron.deny' }
    - name: Customize issue message
      copy:
        src: ../common/files/issue
        dest: /etc/issue
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Customize issue.net message
      copy:
        src: ../common/files/issue.net
        dest: /etc/issue.net
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Customize motd message
      copy:
        src: ../common/files/motd
        dest: /etc/motd
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Configure ABRT to cover also non-packaged programs
      # TODO: make sure that all GPG keys for installed repositories are listed under /etc/pki/rpm-gpg
      lineinfile:
        state: present
        path: /etc/abrt/abrt-action-save-package-data.conf
        backrefs: no
        regexp: '^ProcessUnpackaged'
        line: 'ProcessUnpackaged = yes'
      register: reconfabrt_result
    - name: Reconfigure libreport to disable all email notifications
      replace:
        path: /etc/libreport/events.d/mailx_event.conf
        regexp: '^([^#].*)$'
        replace: '#\1'
      register: reconflibreport_result
    - name: Configure Apache
      # TODO: do not redirect home page to oVirt portals (maybe from Engine setup?) and create custom home page
      lineinfile:
        state: present
        path: "{{ item.path }}"
        insertbefore: "{{ item.before }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      register: apacheconf_result
      with_items:
        - { path: '/etc/httpd/conf/httpd.conf', before: 'BOF', regexp: '^ServerTokens', line: 'ServerTokens ProductOnly' }
        - { path: '/etc/httpd/conf/httpd.conf', before: '^ServerTokens', regexp: '^ServerSignature', line: 'ServerSignature Off' }
        - { path: '/etc/httpd/conf/httpd.conf', before: '^ServerTokens', regexp: '^TraceEnable', line: 'TraceEnable Off' }
        - { path: '/etc/httpd/conf.d/ssl.conf', before: 'BOF', regexp: '^SSLProtocol', line: 'SSLProtocol all -SSLv2 -SSLv3' }
        - { path: '/etc/httpd/conf.d/ssl.conf', before: '^SSLProtocol', regexp: '^SSLCipherSuite', line: 'SSLCipherSuite ALL:!EXP:!NULL:!ADH:!LOW:!RC4' }
    - name: Restart Apache to apply configuration
      # TODO: should restart only if at least one in the registered values above is apacheconf_result.results[*].changed
      systemd:
        name: httpd
        state: restarted
    - name: Add virtual-guest-specific udev rules for QEMU block devices
      copy:
        src: ../common/files/99-qemu-block-timeout.rules
        dest: /etc/udev/rules.d/99-qemu-block-timeout.rules
        owner: root
        group: root
        mode: 0644
        backup: no
      register: qemudev_result
      when:
        - ansible_virtualization_role == "guest"
    - name: Add virtual-guest-specific udev rules for VirtIO block devices
      copy:
        src: ../common/files/99-virtio-block.rules
        dest: /etc/udev/rules.d/99-virtio-block.rules
        owner: root
        group: root
        mode: 0644
        backup: no
      register: virtiodev_result
      when:
        - ansible_virtualization_role == "guest"
    - name: Apply virtual-guest-specific udev rules for block devices
      command: udevadm trigger --attr-match=subsystem=block
      register: udevblocktrigger_result
      when: qemudev_result.changed or virtiodev_result.changed
    - name: set virtual-guest-specific kernel parameters
      sysctl:
        sysctl_file: "{{ item.pfrag }}"
        state: present
        sysctl_set: yes
        reload: yes
        name: "{{ item.pname }}"
        value: "{{ item.pvalue }}"
      with_items:
        - { pname: 'kernel.sched_min_granularity_ns', pvalue: '10000000', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'kernel.sched_wakeup_granularity_ns', pvalue: '15000000', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.dirty_background_ratio', pvalue: '10', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.dirty_ratio', pvalue: '40', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.dirty_expire_centisecs', pvalue: '500', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.dirty_writeback_centisecs', pvalue: '100', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.swappiness', pvalue: '30', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'kernel.sched_migration_cost_ns', pvalue: '5000000', pfrag: '/etc/sysctl.d/virtualguest.conf' }
      when:
        - ansible_virtualization_role == "guest"
    - name: Configure logrotate
      lineinfile:
        state: present
        path: "{{ item.path }}"
        insertbefore: "{{ item.before }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      register: logrotateconf_result
      with_items:
        - { path: '/etc/logrotate.conf', before: 'BOF', regexp: '^rotate', line: 'rotate 312' }
        - { path: '/etc/logrotate.conf', before: '^rotate', regexp: '^compress', line: 'compress' }
    - name: Configure audit
      lineinfile:
        state: present
        path: /etc/audit/audit.rules
        insertbefore: BOF
        regexp: '^-b'
        line: '-b 8192'
      register: auditconf_result
    - name: Restart auditd to apply configuration
      systemd:
        name: auditd
        state: restarted
      when: auditconf_result.changed
# TODO: ensure proper general firewalld configuration
    - name: Configure firewalld to log all denied connections
      # TODO: disable for production use
      command: firewall-cmd --set-log-denied=all
      register: firewalldlogall_result
    - name: Configure mail aliases
      lineinfile:
        state: present
        path: /etc/aliases
        insertafter: EOF
        regexp: '^monitoring:'
        line: "monitoring:	{{ hvp_admin_username }}"
      register: aliases_result
    - name: Apply mail aliases
      command: newaliases
      register: newaliases_result
      when: aliases_result.changed
    - name: Enable and start needed services
      systemd:
        name: "{{ item }}"
        enabled: true
        state: started
        no_block: no
      with_items:
        - haveged
    - name: Disable and stop unneeded services
      systemd:
        name: "{{ item }}"
        enabled: false
        state: stopped
        no_block: no
      with_items:
        - yum-cron
    - name: Create oVirt-shell configuration file
      # TODO: check autoconnect - maybe unsupported because of oVirt-shell deprecation
      template:
        src: templates/ovirtshellrc.j2
        dest: /root/.ovirtshellrc
        owner: root
        group: root
        mode: 0600
        backup: no
    - name: Customize root home subdirectories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      with_items:
        - { path: "/root/backup" }
        - { path: "/root/bin" }
        - { path: "/root/etc" }
        - { path: "/root/log" }
        - { path: "/root/tmp" }
    - name: Create configuration backup list
      copy:
        content: |
          /boot/grub2
          /etc
          /var/www/html
          /usr/local/bin
          /usr/local/sbin
          /usr/local/etc
          /root/bin
          /root/etc
          /root/log
          /root/.[^ekmn]?*
        dest: /root/etc/backup.list
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Create configuration backup script
      copy:
        src: ../common/files/backup-conf
        dest: /root/bin/backup-conf
        owner: root
        group: root
        mode: 0755
        backup: no
    - name: Create log backup script
      copy:
        src: ../common/files/backup-log
        dest: /root/bin/backup-log
        owner: root
        group: root
        mode: 0755
        backup: no
    - name: Initialize system administration journal
      copy:
        content: |
          {{ lookup('pipe', 'date +%Y%m%d') }}
          *) configured {{ lookup('pipe', 'lsb_release -i -r -s') }} {{ lookup('pipe', 'uname -m') }} from Ansible
          
        dest: /root/log/sysadm.log
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Reconfigure Engine vm network interface
      # TODO: add DNS servers if needed
      nmcli:
        ifname: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
        conn_name: "System {{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
        ip4: "{{ hvp_engine_ip }}/{{ hvp_engine_netprefix }}"
        gw4: "{{ hvp_gateway_ip }}"
        autoconnect: yes
        type: ethernet
        state: present
    - include_tasks: ../common/tasks/reboot.yaml
- name: Put oVirt Hosted Engine online
  hosts: ovirt_master
  remote_user: root
  tasks:
    - name: Move out of global maintenance
      vars:
        ansible_ssh_pipelining: no
      command: hosted-engine --set-maintenance --mode=none
      register: exitglobalmaintenance_result

...
