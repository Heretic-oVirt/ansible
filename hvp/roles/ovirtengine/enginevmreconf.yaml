---
# Ansible playbook to reconfigure the pre-made oVirt Self Hosted Engine appliance according to HVP Kickstart-based installation standards
- name: Generate SSH key if not present
  hosts: localhost
  tasks:
    - include_tasks: ../common/tasks/createkeys.yaml
- name: Put oVirt Hosted Engine in maintenance
  hosts: ovirt_master
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Activate global maintenance
      vars:
        ansible_ssh_pipelining: no
      command: hosted-engine --set-maintenance --mode=global
      register: enterglobalmaintenance_result
- name: Perform oVirt Engine vm configuration
  hosts: ovirtengine
  remote_user: root
  tasks:
    - include_tasks: ../common/tasks/setupkeys.yaml
    - name: Get common vars
      include_vars:
        file: ../common/vars/hvp.yaml
    - name: Check UEFI presence
      stat:
        path: "/sys/firmware/efi"
      register: uefipresence_result
    - name: Set UEFI/BIOS facts
      set_fact:
        grub_cfg_file: "{{ uefipresence_result.stat.exists | ternary('/etc/grub2-efi.cfg','/etc/grub2.cfg') }}"
        grub_files_dir: "{{ uefipresence_result.stat.exists | ternary('/boot/efi/EFI/redhat','/boot/grub2') }}"
    - name: Perform a preliminary configuration backup
      command: "tar czf /root/{{ ansible_nodename }}-original-conf.tar.gz /etc {{ grub_files_dir }}"
      args:
        creates: "/root/{{ ansible_nodename }}-original-conf.tar.gz"
    - name: Find CentOS-hosted oVirt and GlusterFS dependency repositories
      shell: grep -o '\[ovirt-.*centos.*\]' /etc/yum.repos.d/ovirt-*-dependencies.repo  | tr -d '[]'
      register: centosovirtrepos_result
    - name: Determine use of custom URLs for repos
      set_fact:
        custom_yum_conf: "{{ ((hvp_repo_baseurl | length > 0) or (hvp_repo_gpgkey | length > 0)) }}"
    - name: Disable use of mirrors in all repos
      block:
        - name: Disable mirrorlist and metalink directives
          shell: "sed -i -e 's/^mirrorlist/#mirrorlist/ ; s/^metalink/#metalink/ ; s/^#baseurl/baseurl/' $(find /etc/yum.repos.d -type f -name '*.repo' -print)"
        - name: Disable fastestmirror Yum plugin
          shell: "sed -i -e 's/^enabled.*/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf"
      when: custom_yum_conf
    - name: Apply custom repo URLs in predefined repos
      vars:
        baseurl: "{{ (hvp_repo_baseurl | selectattr('name', 'match', '^' + item + '$') | list | first).url }}"
      shell: "sed -i -e '/\\[{{ item }}\\]/,/\\[.*\\]/s%^baseurl=.*$%baseurl={{ url }}%' $(grep -l '^\\[{{ item }}\\]' $(find /etc/yum.repos.d -type f -name '*.repo' -print) | head -1 )"
      with_items: "{{ hvp_repo_baseurl | map(attribute='name') | list }}"
    - name: Apply custom gpgkey URLs in predefined repos
      vars:
        gpgkey: "{{ (hvp_repo_gpgkey | selectattr('name', 'match', '^' + item + '$') | list | first).url }}"
      shell: "sed -i -e '/\\[{{ item }}\\]/,/\\[.*\\]/s%^gpgkey=.*$%gpgkey={{ url }}%' $(grep -l '^\\[{{ item }}\\]' $(find /etc/yum.repos.d -type f -name '*.repo' -print) | head -1 )"
      with_items: "{{ hvp_repo_gpgkey | map(attribute='name') | list }}"
    - name: Install YUM-related packages
      vars:
        hvp_yum_related_packages:
        - yum-utils
        - yum-plugin-priorities
        - deltarpm
      yum:
        name: "{{ hvp_yum_related_packages }}"
        state: installed
        disablerepo: '*'
        enablerepo: 'base,updates'
    - name: Disable use of deltarpm
      command: yum-config-manager --save --setopt='deltarpm=0'
      register: disabledeltarpm_result
    - name: Make YUM more robust in presence of network problems
      command: yum-config-manager --save --setopt='retries=30' --setopt='timeout=60'
    - name: Mark CentOS-hosted repositories as higher priority than others
      # Note: this is meant mainly to prevent EPEL from replacing oVirt-specific packages
      # Note: when not in orthodox mode our own repos are higher priority yet
      command: "yum-config-manager --save --setopt='{{item}}.priority=75'"
      register: setcentosovirtrepospriority_result
      with_items: "{{ centosovirtrepos_result.stdout_lines }}"
    - name: Do not fail if CentOS-hosted oVirt and GlusterFS dependency repositories disappear
      # Note: when nightly mode gets enabled we assume that we are late in the selected-oVirt lifecycle and some repositories and release packages may have disappeared - working around here
      command: "yum-config-manager --save --setopt='{{item}}.skip_if_unavailable=1'"
      register: ignorecentosovirtreposfailure_result
      with_items: "{{ centosovirtrepos_result.stdout_lines }}"
      when: hvp_ovirt_nightly_mode
    - name: Customize EPEL repo inclusions
      shell: "sed -i -e 's/epel-release,logcheck,perl-mime-construct,perl-Proc-WaitStat,perl-IPC-Signal,lockfile-progs,haveged,hping3,p7zip*,arj,pwgen,pdsh*,nmon,/epel-release,/' -e 's/epel-release,/epel-release,logcheck,perl-mime-construct,perl-Proc-WaitStat,perl-IPC-Signal,lockfile-progs,haveged,hping3,p7zip*,arj,pwgen,pdsh*,nmon,/' /etc/yum.repos.d/ovirt-*-dependencies.repo"
      register: epelrepoedit_result
    - name: Conditionally add oVirt nightly snaphot repos
      # Note: adding these manually since the release package may have disappeared
      # Note: adding skip_if_unavailable since these repos too seem to disappear after a while
      vars:
        baseurl: "{{ (hvp_repo_baseurl | selectattr('name', 'match', '^' + item.name + '$') | list | length > 0) | ternary((hvp_repo_baseurl | selectattr('name', 'match', '^' + item.name + '$') | list | first ).url, item.baseurl) }}"
      yum_repository:
        name: "{{ item.name }}"
        description: "{{ item.description }}"
        state: present
        enabled: yes
        skip_if_unavailable: yes
        baseurl: "{{ baseurl }}"
        gpgcheck: no
      with_items:
        - { name: "ovirt-{{ compatibility_version }}-snapshot", description: "oVirt {{ compatibility_version }} - Nightly snapshot", baseurl: "https://resources.ovirt.org/pub/ovirt-{{ compatibility_version }}-snapshot/rpm/el$releasever/" }
        - { name: "ovirt-{{ compatibility_version }}-snapshot-static", description: "oVirt {{ compatibility_version }} - Nightly snapshot static", baseurl: "https://resources.ovirt.org/pub/ovirt-{{ compatibility_version }}-snapshot-static/rpm/el$releasever/" }
      when: hvp_ovirt_nightly_mode
    - name: Add HVP release package
      vars:
        baseurl: "{{ (hvp_repo_baseurl | selectattr('name', 'match', '^hvp$') | list | length > 0) | ternary((hvp_repo_baseurl | selectattr('name', 'match', '^hvp$') | list | first ).url | regex_replace('\\$releasever', '7') | regex_replace('\\$basearch', 'x86_64'), 'https://dangerous.ovirt.life/hvp-repos/el7/hvp/') }}"
      yum:
        name: "{{ baseurl }}hvp-release-latest.noarch.rpm"
        state: installed
    - name: Apply custom repo URLs in newly added repos
      vars:
        baseurl: "{{ (hvp_repo_baseurl | selectattr('name', 'match', '^' + item + '$') | list | first).url }}"
      shell: "sed -i -e '/\\[{{ item }}\\]/,/\\[.*\\]/s%^baseurl=.*$%baseurl={{ url }}%' $(grep -l '^\\[{{ item }}\\]' $(find /etc/yum.repos.d -type f -name '*.repo' -print) | head -1 )"
      with_items: "{{ hvp_repo_baseurl | map(attribute='name') | list }}"
    - name: Apply custom gpgkey URLs in newly added repos
      vars:
        gpgkey: "{{ (hvp_repo_gpgkey | selectattr('name', 'match', '^' + item + '$') | list | first).url }}"
      shell: "sed -i -e '/\\[{{ item }}\\]/,/\\[.*\\]/s%^gpgkey=.*$%gpgkey={{ url }}%' $(grep -l '^\\[{{ item }}\\]' $(find /etc/yum.repos.d -type f -name '*.repo' -print) | head -1 )"
      with_items: "{{ hvp_repo_gpgkey | map(attribute='name') | list }}"
    - name: Enable HVP RHV repo
      command: yum-config-manager --enable hvp-rhv-rebuild
      register: enablehvprhvrebuild_result
      when: not hvp_orthodox_mode
    - name: Prefer HVP RHV repo
      command: yum-config-manager --save --setopt='hvp-rhv-rebuild.priority=50'
      register: preferhvprhvrebuild_result
      when: not hvp_orthodox_mode
    - name: Enable HVP RHGS repo
      command: yum-config-manager --enable hvp-rhgs-rebuild
      register: enablehvprhgsrebuild_result
      when: not hvp_orthodox_mode
    - name: Prefer HVP RHGS repo
      command: yum-config-manager --save --setopt='hvp-rhgs-rebuild.priority=50'
      register: preferhvprhgsrebuild_result
      when: not hvp_orthodox_mode
    - name: Enable HVP Openvswitch repo
      command: yum-config-manager --enable hvp-openvswitch-rebuild
      register: enablehvpovsrebuild_result
      when: not hvp_orthodox_mode
    - name: Prefer HVP Openvswitch repo
      command: yum-config-manager --save --setopt='hvp-openvswitch-rebuild.priority=50'
      register: preferhvpovsrebuild_result
      when: not hvp_orthodox_mode
    - name: Enable HVP RH Satellite repo
      command: yum-config-manager --enable hvp-rhsat-rebuild
      register: enablehvprhsatrebuild_result
      when: not hvp_orthodox_mode
    - name: Prefer HVP RH Satellite repo
      command: yum-config-manager --save --setopt='hvp-rhsat-rebuild.priority=50'
      register: preferhvprhsatrebuild_result
      when: not hvp_orthodox_mode
    - name: Enable HVP Ansible repo
      command: yum-config-manager --enable hvp-ansible-rebuild
      register: enablehvpansiblerebuild_result
      when: not hvp_orthodox_mode
    - name: Prefer HVP Ansible repo
      command: yum-config-manager --save --setopt='hvp-ansible-rebuild.priority=50'
      register: preferhvpansiblerebuild_result
      when: not hvp_orthodox_mode
    - name: Check whether Engine upgrade will be needed
      command: engine-upgrade-check
      ignore_errors: yes
      register: engineupgradecheck_result
      when: hvp_upgrade_engine
    - name: Upgrade Engine setup packages
      yum:
        name: 'ovirt*setup*'
        state: latest
      when: hvp_upgrade_engine and (engineupgradecheck_result.rc == 0)
    - name: Perform Engine upgrade
      command: engine-setup --accept-defaults
      register: engineupgrade_result
      when: hvp_upgrade_engine and (engineupgradecheck_result.rc == 0)
    - name: Upgrade all packages
      yum:
        name: '*'
        state: latest
        update_cache: yes
      when: hvp_upgrade_engine
    - name: Apply custom repo URLs in newly upgraded repos
      vars:
        baseurl: "{{ (hvp_repo_baseurl | selectattr('name', 'match', '^' + item + '$') | list | first).url }}"
      shell: "sed -i -e '/\\[{{ item }}\\]/,/\\[.*\\]/s%^baseurl=.*$%baseurl={{ url }}%' $(grep -l '^\\[{{ item }}\\]' $(find /etc/yum.repos.d -type f -name '*.repo' -print) | head -1 )"
      with_items: "{{ hvp_repo_baseurl | map(attribute='name') | list }}"
      when: hvp_upgrade_engine
    - name: Apply custom gpgkey URLs in newly upgraded repos
      vars:
        gpgkey: "{{ (hvp_repo_gpgkey | selectattr('name', 'match', '^' + item + '$') | list | first).url }}"
      shell: "sed -i -e '/\\[{{ item }}\\]/,/\\[.*\\]/s%^gpgkey=.*$%gpgkey={{ url }}%' $(grep -l '^\\[{{ item }}\\]' $(find /etc/yum.repos.d -type f -name '*.repo' -print) | head -1 )"
      with_items: "{{ hvp_repo_gpgkey | map(attribute='name') | list }}"
      when: hvp_upgrade_engine
    - name: Upgrade Python oVirt SDK anyway
      # Note: official oVirt 4.1 Engine appliance vm has an older version, incompatible with Ansible 2.5
      yum:
        name: python-ovirt-engine-sdk4
        state: latest
      when: not hvp_upgrade_engine
    - name: Install HVP-recommended packages
      vars:
        hvp_generic_engine_packages:
          - abrt
          - abrt-addon-ccpp
          - abrt-addon-kerneloops
          - abrt-addon-pstoreoops
          - abrt-addon-python
          - abrt-addon-vmcore
          - abrt-cli
          - libreport-plugin-mailx
          - bash-completion
          - logcheck
          - rsync
          - ntpdate
          - mcstrans
          - stunnel
          - symlinks
          - dos2unix
          - unix2dos
          - screen
          - telnet
          - ftp
          - tree
          - iptraf
          - iptstate
          - nss-tools
          - patch
          - expect
          - ncompress
          - libnl
          - redhat-lsb-core
          - haveged
          - hping3
          - p7zip
          - p7zip-plugins
          - arj
          - pwgen
          - yum-cron
          - yum-plugin-ps
          - gdisk
          - nmon
          - dstat
          - pdsh
          - pdsh-rcmd-ssh
          - NetworkManager-glib
          - nm-connection-editor
          - libselinux-python
          - libsemanage-python
          - virtio-win
          - ovirt-guest-agent
      yum:
        name: "{{ hvp_generic_engine_packages }}"
        state: installed
    - name: Install Bareos-related packages
      vars:
        hvp_bareos_engine_packages:
          - bareos-tools
          - bareos-client
          - bareos-director
          - bareos-database-postgresql
          - bareos-database-tools
          - bareos-webui
      yum:
        name: "{{ hvp_bareos_engine_packages }}"
        state: installed
    - name: Disable Bareos-related services until we configure them
      systemd:
        name: "{{ item }}"
        enabled: false
        state: stopped
        no_block: no
      with_items:
        - bareos-dir
        - bareos-fd
    - name: Cleanup rpm leftovers
      command: "{{ item }}"
      register: cleanupleftovers_result
      with_items:
        - "find /etc -type f -name '*.rpmnew' -exec rename .rpmnew '' '{}' ';'"
        - "find /etc -type f -name '*.rpmsave' -exec rm -f '{}' ';'"
    - name: Create HVP standard directory for machine-specific application dumps
      file:
        path: /var/local/backup
        state: directory
        owner: root
        group: root
        mode: 0750
    - name: Create HVP standard script for machine-specific application dumps
      copy:
        content: |
          #!/bin/bash
          prefix="$(hostname)-$(date '+%Y-%m-%d_%H-%M-%S')"
          # Create oVirt Engine dump to be picked up by standard filesystem backup
          mkdir -p /var/local/backup/engine
          content="ovirt-engine-backup"
          engine-backup --file=/var/local/backup/engine/${prefix}-${content}.tar.gz --mode=backup --log=/var/local/backup/engine/${prefix}-${content}.log
          res1=$?
          # In case of errors, do not remove anything and return error code upstream
          if [ ${res1} -eq 0 ]; then
            # Keep only the last two dumps and logs
            find /var/local/backup/engine -type f -printf '%T@\t%p\0' | sort -z -nrk1 | sed -z -n -e '5,\$s/^\\S*\\s*//p' | xargs -0 rm -f --
          fi
          # Create Bareos Director catalog dump to be picked up by standard filesystem backup
          mkdir -p /var/local/backup/director
          content="bareos-catalog-backup"
          dbname=$(grep '^[[:space:]]*dbname' /etc/bareos/bareos-dir.d/catalog/MyCatalog.conf | sed -e 's/^.*=\s*\(.*\)$/\1/')
          dbuser=$(grep '^[[:space:]]*dbuser' /etc/bareos/bareos-dir.d/catalog/MyCatalog.conf | sed -e 's/^.*=\s*\(.*\)$/\1/')
          PGPASSWORD=$(grep '^[[:space:]]*dbpassword' /etc/bareos/bareos-dir.d/catalog/MyCatalog.conf | sed -e 's/^.*=\s*\(.*\)$/\1/')
          export PGPASSWORD
          pg_dump -v -U ${dbuser} -F c -f /var/local/backup/director/${prefix}-${content}.pgdump ${dbname} > /var/local/backup/director/${prefix}-${content}.log 2>&1
          res2=$?
          # In case of errors, do not remove anything and return error code upstream
          if [ ${res2} -eq 0 ]; then
            # Keep only the last two dumps and logs
            find /var/local/backup/director -type f -printf '%T@\t%p\0' | sort -z -nrk1 | sed -z -n -e '5,\$s/^\\S*\\s*//p' | xargs -0 rm -f --
          fi
          if [ ${res1} -ne 0 -o ${res2} -ne 0 ]; then
            logger -s -p "local7.err" -t "dump2backup" "Error in dump procedures (res1: ${res1} - res2: ${res2})"
            exit 255
          fi
        dest: /usr/local/sbin/dump2backup
        owner: root
        group: root
        mode: 0750
        backup: no
    - name: Configure YUM-cron
      shell: "sed -i -e 's/^update_messages\\s.*$/update_messages = no/' -e 's/^download_updates\\s.*$/download_updates = no/' -e 's/^apply_updates\\s.*$/apply_updates = no/' -e 's/^emit_via\\s.*$/emit_via = None/' /etc/yum/yum-cron*.conf"
      register: confyumcron_result
    - name: Configure kernel packages to be kept
      command: yum-config-manager --save --setopt='installonly_limit=3'
      register: keepkernelrpm_result
    - name: Configure kernel I/O scheduler policy
      # TODO: should not skip if line already contains elevator= directive
      # TODO: enact immediately if changed
      lineinfile:
        state: present
        path: /etc/default/grub
        backrefs: yes
        regexp: '^(GRUB_CMDLINE_LINUX=(?!.*elevator)"[^"]+)(".*)'
        line: '\1 elevator=deadline\2'
      register: kernelio_result
    - name: Update GRUB menu
      command: "grub2-mkconfig -o {{ grub_cfg_file }}"
      register: updategrubmenu_result
      when: kernelio_result.changed
    - name: Disable Ctrl-Alt-Del
      systemd:
        name: ctrl-alt-del.target
        masked: yes
    - name: Set generic kernel parameters
      sysctl:
        sysctl_file: "{{ item.pfrag }}"
        state: present
        sysctl_set: yes
        reload: yes
        name: "{{ item.pname }}"
        value: "{{ item.pvalue }}"
      with_items:
        - { pname: 'kernel.printk', pvalue: '1', pfrag: '/etc/sysctl.d/console-log.conf' }
        - { pname: 'kernel.panic', pvalue: '5', pfrag: '/etc/sysctl.d/panic.conf' }
    - name: Configure boot-time time-sync sources by means of NTPdate
      copy:
        content: |
          {% for host in hvp_engine_ntp_sources %}
          {{ host }}
          {% endfor %}
        dest: /etc/ntp/step-tickers
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Create SELinux local modules directory
      file:
        path: /etc/selinux/local
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Create a SELinux local module for NTPdate
      copy:
        src: ../common/files/myntpdate.te
        dest: /etc/selinux/local/myntpdate.te
        owner: root
        group: root
        mode: 0644
        backup: no
      register: addntpdatepolicy_result
    - name: Compile and load the SELinux local module for NTPdate
      args:
        chdir: /etc/selinux/local
      command: "{{ item }}"
      register: compilentpdatepolicy_result
      with_items:
        - 'checkmodule -M -m -o myntpdate.mod myntpdate.te'
        - 'semodule_package -o myntpdate.pp -m myntpdate.mod'
        - 'semodule -i myntpdate.pp'
      when: addntpdatepolicy_result.changed
    - name: Enable NTPdate on boot
      systemd:
        name: ntpdate
        enabled: yes
    - name: Remove default run-time time-sync sources in Chrony
      replace:
        path: /etc/chrony.conf
        regexp: '^(server.*)$'
        replace: '#\1'
      register: removedefaultchronysources_result
    - name: Configure run-time time-sync sources in Chrony
      blockinfile:
        state: present
        path: /etc/chrony.conf
        create: no
        insertafter: ""
        marker: "# {mark} NTP SOURCES ANSIBLE MANAGED BLOCK"
        block: |
          {% for host in hvp_engine_ntp_sources %}
          server {{ host }} iburst
          {% endfor %}
      register: configurechronysources_result
    - name: Apply Chrony reconfiguration
      systemd:
        name: chronyd
        state: restarted
      when: removedefaultchronysources_result.changed or configurechronysources_result.changed
    - name: Configure OpenSSH server
      lineinfile:
        state: present
        path: /etc/ssh/sshd_config
        insertbefore: BOF
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      register: sshdconf_result
      with_items:
        - { regexp: '^MaxAuthTries', line: 'MaxAuthTries 3' }
        - { regexp: '^UseDNS', line: 'UseDNS no' }
        - { regexp: '^Banner', line: 'Banner /etc/issue.net' }
    - name: Restart OpenSSH to apply configuration
      systemd:
        name: sshd
        state: restarted
      when: sshdconf_result.changed
    - name: Configure use of at/cron facilities
      copy:
        content: |
          root
        dest: "{{ item.path }}"
        owner: root
        group: root
        mode: 0600
        backup: no
      with_items:
        - { path: '/etc/at.allow' }
        - { path: '/etc/cron.allow' }
    - name: Sanitize use of at/cron facilities
      file:
        path: "{{ item.path }}"
        state: absent
      with_items:
        - { path: '/etc/at.deny' }
        - { path: '/etc/cron.deny' }
    - name: Customize issue message
      copy:
        src: ../common/files/issue
        dest: /etc/issue
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Customize issue.net message
      copy:
        src: ../common/files/issue.net
        dest: /etc/issue.net
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Customize motd message
      copy:
        src: ../common/files/motd
        dest: /etc/motd
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Configure ABRT to cover also non-packaged programs
      # TODO: make sure that all GPG keys for installed repositories are listed under /etc/pki/rpm-gpg
      lineinfile:
        state: present
        path: /etc/abrt/abrt-action-save-package-data.conf
        backrefs: no
        regexp: '^ProcessUnpackaged'
        line: 'ProcessUnpackaged = yes'
      register: reconfabrt_result
    - name: Reconfigure libreport to disable all email notifications
      replace:
        path: /etc/libreport/events.d/mailx_event.conf
        regexp: '^([^#].*)$'
        replace: '#\1'
      register: reconflibreport_result
    - name: Configure Apache
      # TODO: do not redirect home page to oVirt portals (maybe from Engine setup?) and create custom home page
      lineinfile:
        state: present
        path: "{{ item.path }}"
        insertbefore: "{{ item.before }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      register: apacheconf_result
      with_items:
        - { path: '/etc/httpd/conf/httpd.conf', before: 'BOF', regexp: '^ServerTokens', line: 'ServerTokens ProductOnly' }
        - { path: '/etc/httpd/conf/httpd.conf', before: '^ServerTokens', regexp: '^ServerSignature', line: 'ServerSignature Off' }
        - { path: '/etc/httpd/conf/httpd.conf', before: '^ServerTokens', regexp: '^TraceEnable', line: 'TraceEnable Off' }
        - { path: '/etc/httpd/conf.d/ssl.conf', before: 'BOF', regexp: '^SSLProtocol', line: 'SSLProtocol all -SSLv2 -SSLv3' }
        - { path: '/etc/httpd/conf.d/ssl.conf', before: '^SSLProtocol', regexp: '^SSLCipherSuite', line: 'SSLCipherSuite ALL:!EXP:!NULL:!ADH:!LOW:!RC4' }
    - name: Restart Apache to apply configuration
      systemd:
        name: httpd
        state: restarted
      when: apacheconf_result.changed
    - name: Add virtual-guest-specific udev rules for QEMU block devices
      copy:
        src: ../common/files/99-qemu-block-timeout.rules
        dest: /etc/udev/rules.d/99-qemu-block-timeout.rules
        owner: root
        group: root
        mode: 0644
        backup: no
      register: qemudev_result
      when:
        - ansible_virtualization_role == "guest"
    - name: Add virtual-guest-specific udev rules for VirtIO block devices
      copy:
        src: ../common/files/99-virtio-block.rules
        dest: /etc/udev/rules.d/99-virtio-block.rules
        owner: root
        group: root
        mode: 0644
        backup: no
      register: virtiodev_result
      when:
        - ansible_virtualization_role == "guest"
    - name: Apply virtual-guest-specific udev rules for block devices
      command: udevadm trigger --attr-match=subsystem=block
      register: udevblocktrigger_result
      when: qemudev_result.changed or virtiodev_result.changed
    - name: Set virtual-guest-specific kernel parameters
      sysctl:
        sysctl_file: "{{ item.pfrag }}"
        state: present
        sysctl_set: yes
        reload: yes
        name: "{{ item.pname }}"
        value: "{{ item.pvalue }}"
      with_items:
        - { pname: 'kernel.sched_min_granularity_ns', pvalue: '10000000', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'kernel.sched_wakeup_granularity_ns', pvalue: '15000000', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.dirty_background_ratio', pvalue: '10', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.dirty_ratio', pvalue: '40', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.dirty_expire_centisecs', pvalue: '500', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.dirty_writeback_centisecs', pvalue: '100', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'vm.swappiness', pvalue: '30', pfrag: '/etc/sysctl.d/virtualguest.conf' }
        - { pname: 'kernel.sched_migration_cost_ns', pvalue: '5000000', pfrag: '/etc/sysctl.d/virtualguest.conf' }
      when:
        - ansible_virtualization_role == "guest"
    - name: Configure logcheck email reports receiver
      lineinfile:
        state: present
        path: /etc/logcheck/logcheck.conf
        insertbefore: BOF
        regexp: '^SENDMAILTO='
        line: "SENDMAILTO={{ hvp_email_receiver }}"
      register: logcheckconf_result
    - name: Configure logcheck rules
      file:
        path: "{{ item.path }}"
        state: link
        src: "{{ item.src }}"
        force: yes
        owner: root
        group: root
      with_items:
        - { path: '/etc/logcheck/violations.ignore.d/kernel', src: '../ignore.d.server/kernel' }
        - { path: '/etc/logcheck/violations.ignore.d/systemd', src: '../ignore.d.server/systemd' }
    - name: Reconfigure logrotate for logcheck compliance
      # TODO: reconfigure syslog files for Logcheck as per https://bugzilla.redhat.com/show_bug.cgi?id=1062147 - remove when fixed upstream
      lineinfile:
        state: present
        path: /etc/logrotate.d/syslog
        insertafter: '^[\s]*missingok'
        regexp: '^[\s]*create 0640 root adm'
        line: '    create 0640 root adm'
      register: logrotatelogcheckcompat_result
    - name: Reconfigure log files for logcheck compliance
      # TODO: reconfigure syslog files for Logcheck as per https://bugzilla.redhat.com/show_bug.cgi?id=1062147 - remove when fixed upstream
      file:
        path: "{{ item }}"
        state: file
        owner: root
        group: adm
        mode: 0640
      with_items:
        - /var/log/messages
        - /var/log/secure
        - /var/log/cron
        - /var/log/maillog
        - /var/log/spooler
    - name: Configure logrotate
      lineinfile:
        state: present
        path: "{{ item.path }}"
        insertbefore: "{{ item.before }}"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      register: logrotateconf_result
      with_items:
        - { path: '/etc/logrotate.conf', before: 'BOF', regexp: '^rotate', line: 'rotate 312' }
        - { path: '/etc/logrotate.conf', before: '^rotate', regexp: '^compress', line: 'compress' }
    - name: Configure audit
      lineinfile:
        state: present
        path: /etc/audit/audit.rules
        insertbefore: BOF
        regexp: '^-b'
        line: '-b 8192'
      register: auditconf_result
    - name: Restart auditd to apply configuration
      systemd:
        name: auditd
        state: restarted
      when: auditconf_result.changed
# TODO: ensure proper general firewalld configuration
    - name: Configure firewalld to log all denied connections
      # TODO: disable for production use (or ensure proper DOS protection)
      command: "{{ item }}"
      register: firewalldlogall_result
      with_items:
        - firewall-cmd --set-log-denied=all
        - firewall-cmd --reload
    - name: Create HVP admin user
      user:
        name: "{{ hvp_admin_username }}"
        state: present
        comment: Admin
        groups: wheel
        append: yes
        password: "{{ hvp_admin_password | password_hash('sha512') }}"
    - name: Configure mail aliases
      lineinfile:
        state: present
        path: /etc/aliases
        insertafter: EOF
        regexp: '^{{ hvp_email_receiver | regex_replace("@localhost", "") }}:'
        line: '{{ hvp_email_receiver | regex_replace("@localhost", "") }}:	{{ hvp_admin_username }}'
      when: "'@localhost' in hvp_email_receiver"
      register: aliases_result
    - name: Apply mail aliases
      command: newaliases
      register: newaliases_result
      when: aliases_result.changed
    - name: Configure mail relay
      block:
        - name: Use SMTPS for mail relay
          block:
            - name: Set mail relay
              set_fact:
                actual_email_relay: "{{ hvp_email_relay }}"
                hvp_email_relay: '[127.0.0.1]:11125'
            - name: Prepare Stunnel configuration for SMTPS mail relay
              template:
                src: templates/relay-smtps.conf.j2
                dest: /etc/stunnel/relay-smtps.conf
                owner: root
                group: root
                mode: 0644
                backup: yes
            - name: Prepare systemd socket for SMTPS mail relay
              copy:
                src: files/relay-smtps.socket
                dest: /etc/systemd/system/relay-smtps.socket
                owner: root
                group: root
                mode: 0644
                backup: yes
              register: systemdsocketconf_result
            - name: Prepare systemd template service for SMTPS mail relay
              copy:
                src: files/relay-smtps@.service
                dest: /etc/systemd/system/relay-smtps@.service
                owner: root
                group: root
                mode: 0644
                backup: yes
              register: systemdserviceconf_result
            - name: Reload systemd configuration
              command: systemctl daemon-reload
              when: systemdsocketconf_result.changed or systemdserviceconf_result.changed
            - name: Enable systemd socket for SMTPS mail relay
              systemd:
                name: relay-smtps.socket
                enabled: true
            - name: Configure Postfix to avoid STARTTLS
              command: "postconf -e 'smtp_use_tls = no'"
          when: (hvp_email_relay_use_smtps | bool)
        - name: Configure Postfix for mail relay
          command: "postconf -e 'relayhost = {{ hvp_email_relay }}'"
      when: "(hvp_email_relay | trim) != ''"
    - name: Mask and stop dangerous or noisy services
      systemd:
        name: "{{ item }}"
        masked: yes
        state: stopped
        no_block: no
      with_items:
        - yum-cron
        - kdump
    - name: Enable and start needed services
      systemd:
        name: "{{ item }}"
        enabled: true
        state: started
        no_block: no
      with_items:
        - firewalld
        - haveged
        - postfix
    - name: Install oVirt-shell package
      # Note: oVirt-shell has been deprecated and is not available on oVirt >= 4.3 (since it depends on API v3)
      yum:
        name: 'ovirt-engine-cli'
        state: installed
      ignore_errors: yes
      register: installovirtshell_result
    - name: Create oVirt-shell configuration file
      template:
        src: templates/ovirtshellrc.j2
        dest: /root/.ovirtshellrc
        owner: root
        group: root
        mode: 0600
        backup: no
      when: installovirtshell_result.rc == 0
    - name: Customize root home subdirectories
      file:
        path: "{{ item.path }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      with_items:
        - { path: "/root/backup" }
        - { path: "/root/bin" }
        - { path: "/root/etc" }
        - { path: "/root/log" }
        - { path: "/root/tmp" }
    - name: Create configuration backup list
      copy:
        content: |
          /boot/grub2
          /etc
          /var/www/html
          /usr/local/bin
          /usr/local/sbin
          /usr/local/etc
          /root/bin
          /root/etc
          /root/log
          /root/.[^ekmn]?*
        dest: /root/etc/backup.list
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Create configuration backup script
      copy:
        src: ../common/files/backup-conf
        dest: /root/bin/backup-conf
        owner: root
        group: root
        mode: 0755
        backup: no
    - name: Create log backup script
      copy:
        src: ../common/files/backup-log
        dest: /root/bin/backup-log
        owner: root
        group: root
        mode: 0755
        backup: no
    - name: Initialize system administration journal
      copy:
        content: |
          {{ lookup('pipe', 'date +%Y%m%d') }}
          *) configured {{ lookup('pipe', 'lsb_release -i -r -s') }} {{ lookup('pipe', 'uname -m') }} from Ansible
          
        dest: /root/log/sysadm.log
        owner: root
        group: root
        mode: 0644
        backup: no
    - name: Restart NetworkManager to avoid problems below
      # TODO: ideally should restart only if upgraded above
      systemd:
        name: NetworkManager
        state: restarted
    - name: Reconfigure Engine vm network interface
      nmcli:
        ifname: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
        conn_name: "System {{ hostvars[inventory_hostname]['ansible_default_ipv4']['interface'] }}"
        ip4: "{{ hvp_engine_ip }}/{{ hvp_engine_netprefix }}"
        gw4: "{{ hvp_gateway_ip }}"
        dns4: "{{ hvp_engine_dnslist.split(',') }}"
        autoconnect: yes
        type: ethernet
        state: present
    - name: Make sure Engine vm network interface is no more in DHCP mode
      # TODO: workaround for nmcli module shortcomings - https://github.com/ansible/ansible/issues/36615 - remove when fixed upstream
      command: "{{ item }}"
      with_items:
        - 'nmcli con mod "System {{ hostvars[inventory_hostname]["ansible_default_ipv4"]["interface"] }}" ipv4.method manual'
        - 'nmcli con reload'
        - 'nmcli con up "System {{ hostvars[inventory_hostname]["ansible_default_ipv4"]["interface"] }}"'
    - name: Disable all cloud-init related services
      systemd:
        name: "{{ item }}"
        masked: yes
        state: stopped
      with_items:
        - cloud-init.service
        - cloud-init-local.service
        - cloud-config.service
        - cloud-config.target
        - cloud-final.service
        - network.service
    - name: Reboot Engine vm
      # TODO: only conditionally reboot machine depending on above actions results
      # TODO: reboot results in spurious poweroff - ignoring errors as workaround - remove when fixed upstream
      import_tasks: ../common/tasks/reboot.yaml
      ignore_errors: yes
      register: enginereboot_result
- name: Put oVirt Hosted Engine online
  hosts: ovirt_master
  remote_user: root
  tasks:
    - name: Move out of global maintenance
      vars:
        ansible_ssh_pipelining: no
      command: hosted-engine --set-maintenance --mode=none
      register: exitglobalmaintenance_result
    - name: Wait for good Engine health
      vars:
        ansible_ssh_pipelining: no
      shell: "hosted-engine --vm-status | grep -i good"
      retries: 60
      delay: 30
      register: enginehealth_result
      until: enginehealth_result is succeeded
...
